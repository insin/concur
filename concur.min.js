/**
 * Concur 0.1.2 - https://github.com/insin/concur
 * MIT Licensed
 */
(function(){function e(c){return f[c]}var f={};e.define=function(c,b){var a={},d={};a.exports=d;b(a,d,e);f[c]=a.exports};e.define("isomorph/lib/is",function(c){var b=Object.prototype.toString;c.exports={Array:function(a){return"[object Array]"==b.call(a)},Boolean:function(a){return"[object Boolean]"==b.call(a)},Date:function(a){return"[object Date]"==b.call(a)},Empty:function(a){for(var b in a)return!1;return!0},Error:function(a){return"[object Error]"==b.call(a)},Function:function(a){return"[object Function]"==
b.call(a)},NaN:isNaN,Number:function(a){return"[object Number]"==b.call(a)},Object:function(a){return"[object Object]"==b.call(a)},RegExp:function(a){return"[object RegExp]"==b.call(a)},String:function(a){return"[object String]"==b.call(a)}}});e.define("isomorph/lib/object",function(c){c.exports={extend:function(b,a){if(a)for(var d in a)a.hasOwnProperty(d)&&(b[d]=a[d]);return b},inherits:function(b,a){var d=function(){};d.prototype=a.prototype;b.prototype=new d;return b.prototype.constructor=b}}});
e.define("concur",function(c,b,a){function d(a,b,d){var c;c=b&&b.hasOwnProperty("constructor")?b.constructor:function(){return a.apply(this,arguments)};if(a!==f)e.extend(c,a),e.inherits(c,a),c.__super__=a.prototype;b&&e.extend(c.prototype,b);d&&e.extend(c,d);return c}a("isomorph/lib/is");var e=a("isomorph/lib/object"),f=c.exports=function(){};f.extend=function(a,b){"undefined"!=typeof this.prototype&&"undefined"!=typeof this.prototype.__meta__&&(a=a||{},b=b||{},this.prototype.__meta__(a,b));var c=
d(this,a,b);c.extend=this.extend;return c}});window.Concur=f.concur})();